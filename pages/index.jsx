import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useState } from 'react';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import Layout from '../components/Layout';
import DatePicker from 'react-datepicker';
import Modal from '../components/Modal';
import { useSelector, useDispatch } from 'react-redux';
import {
  toggleModalAC,
  changeStatus,
  delete_item
} from '../redux/actions/task_actions';

import 'react-datepicker/dist/react-datepicker.css';

export default function Home() {
  const [startDate, setStartDate] = useState(new Date());
  const [day, setDay] = useState('Today');
  const [tomorrow, setTomorrow] = useState(false);
  const dispatch = useDispatch();
  const { modal_show } = useSelector((state) => state.task);
  const { taskName, textTask, taskStatus } = useSelector((state) => state.task);
  const { task__arr } = useSelector((state) => state.task);

  debugger;
  debugger;
  const handleDayBtn = (e) => {
    setDay(e.target.outerText);

    if (e.target.outerText === 'Tomorrow') {
      debugger;
      let day = startDate.getDate() + 1;
      let month = startDate.getMonth();
      let year = startDate.getFullYear();
      let newDate = new Date(year, month, day);
      if (!tomorrow) {
        setStartDate(newDate);
      }
      setTomorrow(true);
    } else if (e.target.outerText === 'Today') {
      let today = new Date();
      setStartDate(today);
      setTomorrow(false);
    }
  };
  const toggleModal = () => {
    dispatch(toggleModalAC());
  };

  const handleNextBtn = (item) => {
    debugger;
    if (item.status == 'new') {
      dispatch(changeStatus(item.id, 'progress', task__arr));
    } else if (item.status == 'progress') {
      dispatch(changeStatus(item.id, 'done', task__arr));
    }
  };
  const handlePrevBtn = (item) => {
    debugger;
    if (item.status == 'done') {
      dispatch(changeStatus(item.id, 'progress', task__arr));
    } else if (item.status == 'progress') {
      dispatch(changeStatus(item.id, 'new', task__arr));
    }
  };

  const handeDeleteBtn = (id, task__arr) => {
    debugger;
    dispatch(delete_item(id, task__arr));
  };
  return (
    <div>
      <Head>
        <title>Task Manager</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />

        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link
          href="https://fonts.googleapis.com/css2?family=Luxurious+Roman&family=Montserrat+Alternates:ital,wght@1,400;1,500;1,700;1,900&family=Outfit:wght@400;700&family=Spline+Sans:wght@500;700&display=swap"
          rel="stylesheet"
        />
      </Head>
      {modal_show && <Modal />}
      <Layout>
        {
          <div
            className={
              modal_show ? 'wrapper low_opacity container' : 'wrapper container'
            }
          >
            <div className="sidebar">
              <DatePicker
                selected={startDate}
                inline
                onChange={(date) => setStartDate(date)}
              />
              <button onClick={toggleModal} className="makeTaskBtn">
                Make New Task
              </button>
            </div>
            <div className="main">
              <div className="links">
                <a
                  href="#"
                  onClick={handleDayBtn}
                  className={day == 'Today' ? 'selected' : ''}
                >
                  Today
                </a>
                <a
                  href="#"
                  onClick={handleDayBtn}
                  className={day == 'Tomorrow' ? 'selected' : ''}
                >
                  Tomorrow
                </a>
              </div>
              <div className="table">
                <div className="new_request">
                  <div className="title new_request_title">New Requests</div>
                  <div className="cards">
                    {task__arr &&
                      task__arr.map((item) =>
                        item && item.status == 'new' ? (
                          <div className="card" key={item.id}>
                            <span
                              onClick={(e) =>
                                handeDeleteBtn(item.id, task__arr)
                              }
                              className="close"
                            >
                              X
                            </span>
                            <div className="date">{item.date}</div>
                            <h5
                              className={
                                item.taskPriority == 'Lowest'
                                  ? 'priority green'
                                  : item.taskPriority == 'Low'
                                  ? 'priority green'
                                  : item.taskPriority == 'medium'
                                  ? 'priority blue'
                                  : item.taskPriority == 'high'
                                  ? 'priority red'
                                  : item.taskPriority == 'highest'
                                  ? 'priority red'
                                  : 'priority'
                              }
                            >
                              {item.taskPriority}
                            </h5>

                            <h3 className="item_title">{item.name}</h3>
                            <br />
                            <div className="item_text">{item.text}</div>
                            <div className="buttons">
                              <button className="card__btn"> Previous</button>
                              <button
                                className="card__btn"
                                onClick={() => handleNextBtn(item)}
                              >
                                Next
                              </button>
                            </div>
                            <div className="date">
                              <span>{item.dateTime.getDate()}</span> : 
                              <span> {item.dateTime.getMonth() + 1}</span> : 
                              <span> {item.dateTime.getFullYear()}</span> 
                            </div>
                          </div>
                        ) : null
                      )}
                  </div>
                </div>

                <div className="in_progress">
                  <div className="title in_progress_title">In Progress</div>
                  <div className="cards">
                    {task__arr &&
                      task__arr.map((item) =>
                        item && item.status == 'progress' ? (
                          <div className="card" key={item.id}>
                            <span
                              onClick={(e) =>
                                handeDeleteBtn(item.id, task__arr)
                              }
                              className="close"
                            >
                              X
                            </span>
                            <h5
                              className={
                                item.taskPriority == 'Lowest'
                                  ? 'priority green'
                                  : item.taskPriority == 'Low'
                                  ? 'priority green'
                                  : item.taskPriority == 'medium'
                                  ? 'priority blue'
                                  : item.taskPriority == 'high'
                                  ? 'priority red'
                                  : item.taskPriority == 'highest'
                                  ? 'priority red'
                                  : 'priority'
                              }
                            >
                              {item.taskPriority}
                            </h5>
                            <h3 className="item_title">{item.name}</h3>
                            <br />
                            <div className="item_text">{item.text}</div>
                            <div className="buttons">
                              <button
                                className="card__btn"
                                onClick={() => handlePrevBtn(item)}
                              >
                                {' '}
                                Previous
                              </button>
                              <button
                                className="card__btn"
                                onClick={() => handleNextBtn(item)}
                              >
                                {' '}
                                Next
                              </button>
                            </div>
                          </div>
                        ) : null
                      )}
                  </div>
                </div>
                <div className="done">
                  <div className="title done_title">Done</div>
                  <div className="cards">
                    {task__arr &&
                      task__arr.map((item) =>
                        item && item.status == 'done' ? (
                          <div className="card" key={item.id}>
                            <span
                              onClick={(e) =>
                                handeDeleteBtn(item.id, task__arr)
                              }
                              className="close"
                            >
                              X
                            </span>
                            <h5
                              className={
                                item.taskPriority == 'Lowest'
                                  ? 'priority green'
                                  : item.taskPriority == 'Low'
                                  ? 'priority green'
                                  : item.taskPriority == 'medium'
                                  ? 'priority blue'
                                  : item.taskPriority == 'high'
                                  ? 'priority red'
                                  : item.taskPriority == 'highest'
                                  ? 'priority red'
                                  : 'priority'
                              }
                            >
                              {item.taskPriority}
                            </h5>
                            <h3 className="item_title">{item.name}</h3>
                            <br />
                            <div className="item_text">{item.text}</div>
                            <div className="buttons">
                              <button
                                className="card__btn"
                                onClick={() => handlePrevBtn(item)}
                              >
                                {' '}
                                Previous
                              </button>
                              <button
                                className="card__btn"
                                onClick={() => handleNextBtn(item)}
                              >
                                {' '}
                                Next
                              </button>
                            </div>
                          </div>
                        ) : null
                      )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        }
      </Layout>
    </div>
  );
}
